<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <file:connector name="EBTFile" writeToDirectory="${ebt.writeDirectory}" autoDelete="true" outputAppend="true" streaming="true" validateConnections="true" doc:name="File"/>
    <flow name="sfsl_benefits_batchFlow">
        <file:inbound-endpoint path="${sfsl.path}" moveToDirectory="${sfsl.move}" responseTimeout="10000" doc:name="File" pollingFrequency="60000"/>
        <dw:transform-message metadata:id="c81d5ed6-5830-4872-a63a-b402a5645683" doc:name="Transform Message">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload splitBy "\n" map
{
	object: ({
		type: "header",
		fileId: $[0..10] as :number,
		agencyId: $[11..16],
		maintenanceType: $[17..32],
		fileCreateDate: $[33..40] as :number,
		fileCreateTime: $[41..44] as :number,
		totalDetailRecords: $[45..53] as :number,
		numberOfAdds: $[54..62] as :number,
		numberOfCancels: $[63..71] as :number,
		amountOfAdds: $[72..80] as :number
	}) when ($ [17..24]) == 'FS-DAILY' 
	otherwise
	({
		type: "detail",
		fileId: $[0..10] as :number,
		refreshAction: $[11..11],
		caseNumber: $[12..21],
		benefitType: $[22..29],
		documentNumber: $[30..41],
		authorizationAmount: $[42..50] as :number,
		benefitAvailableDate: $[51..58] as :number,
		benefitAvailableTime: $[59..62] as :number,
		financialCountyCode: $[63..64],
		benefitMonth: $[65..66],
		benefitYear: $[67..70],
		processStatusFlag: $[71..71]
	})
}]]></dw:set-payload>
        </dw:transform-message>
        <json:json-to-object-transformer returnClass="java.util.List" doc:name="JSON to Object"/>
        <batch:execute name="sfsl_benefits_batchBatch" doc:name="sfsl_benefits_batchBatch"/>
    </flow>
    <batch:job name="sfsl_benefits_batchBatch">
        <batch:process-records>
            <batch:step name="Batch_Step">
                <choice doc:name="Choice">
                    <when expression="#[payload.object.type == 'detail']">
                        <dw:transform-message metadata:id="e125d2ce-4a4a-49e4-8fb6-2107ac2af617" doc:name="create EBT Detail Record">
                            <dw:input-payload/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output text/plain schemaPath = "EBTBenefitDetailRecord.ffd"
---
payload map ({
	Record_Type: 'DT',
	ActionCode: '01',
	StateID: payload.object.caseNumber,
	BenefitType: payload.object.benefitType,
	AuthorizationNumber: payload.object.documentNumber,
	DebitCreditIndicator: 'CR',
	Amount: payload.object.authorizationAmount,
	BenefitAvailDate: payload.object.benefitAvailableDate,
	BenefitPeriodDate: payload.object.benefitYear ++ payload.object.benefitMonth,
	OfficeCode: payload.object.financialCountyCode,
	Filler: ' ',
	ResponseCode: '0000',
	cc: "\r\n"
})]]></dw:set-payload>
                        </dw:transform-message>
                        <object-to-string-transformer doc:name="Object to String"/>
                        <file:outbound-endpoint path="${ebt.writeDirectory}" connector-ref="EBTFile" responseTimeout="10000" doc:name="File" outputPattern="ebt-benefits.dat"/>
                    </when>
                    <otherwise>
                        <dw:transform-message metadata:id="a6e8b9d4-181e-49cd-b02d-0f1d662b881e" doc:name="create EBT Header Record">
                            <dw:input-payload/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output text/plain schemaPath = "EBTBenefitHeaderRecord.ffd"
---
payload map ({
	Record_type: 'HD',
	TransactionType: 'MTFSBEUP',
	ControlNumber: payload.object.fileId,
	CreateDate: payload.object.fileCreateDate,
	CreateTime: payload.object.fileCreateTime,
	filler1: ' ',
	StateCode: 'MT',
	ResponseCode: '0000',
	cc: "\r\n"
})]]></dw:set-payload>
                        </dw:transform-message>
                        <object-to-string-transformer doc:name="Object to String"/>
                        <file:outbound-endpoint path="${ebt.writeDirectory}" connector-ref="EBTFile" responseTimeout="10000" doc:name="File" outputPattern="ebt-benefits.dat"/>
                    </otherwise>
                </choice>
            </batch:step>
        </batch:process-records>
    </batch:job>
    <flow name="transactionType_lookup_Flow">
        <scripting:component doc:name="TransactionType_Script">
            <scripting:script engine="Groovy"><![CDATA[def tranType = "UNKNOWN"
def mmType = payload.object.maintenanceType
if (mmType != null) {
	mmType = mmType.toUpperCase()
}
println "maintenanceType to lookup is: " + mmType
switch (mmType) {
	case ["FS-DAILY"]:
      tranType = "MTFSBEUP"
      break
      case ["CASH-DAILY"]:
      tranType = "MTCSBEUP"
      break
}
return ["tranType":tranType]]]></scripting:script>
        </scripting:component>
    </flow>
    <flow name="actionCode_lookup_Flow">
        <scripting:component doc:name="ActionCodeScript">
            <scripting:script engine="Groovy"><![CDATA[def actionCode = "UNKNOWN"
def refreshAction = payload.object.maintenanceType
if (refreshAction != null) {
	refreshAction = mmType.toUpperCase()
}
println "Refresh Action to lookup is: " + refreshAction
switch (refreshAction) {
	case ["A"]:
      actionCode = "01"
      break
}
return ["actionCode":actionCode]]]></scripting:script>
        </scripting:component>
    </flow>
</mule>
